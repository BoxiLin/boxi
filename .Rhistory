library(boxi)
library(boxi)
library(boxi)
rep(10,3)
allele_score <- function(al) ifelse(al %in% c(list4.1, list4.2), 4,
al %in% c(list3.1, list3.2), 3,
al %in% c(list2.1, list2.2), 2,
al %in% c(list1.1, list1.2), 1, 0)
s1 == s2
getwd()
setwd("/Volumes/boxi/psa/pkg/boxi")
setwd("/Volumes/boxi/psa/pkg/boxi")
}
}
}
ifelse(al %in% c(list4.1, list4.2), 4,
ifelse(al %in% c(list3.1, list3.2), 3,
ifelse(al %in% c(list2.1, list2.2), 2,
ifelse(al %in% c(list1.1, list1.2), 1, 0))))}
cftr <- function(allele1, allele2) {
n = length(allele1)
score <- rep(0, n)
# assign allele score
allele_score <- function(al){
ifelse(al %in% c(list4.1, list4.2), 4,
ifelse(al %in% c(list3.1, list3.2), 3,
ifelse(al %in% c(list2.1, list2.2), 2,
ifelse(al %in% c(list1.1, list1.2), 1, 0))))
}
# combining 2 allele scores into CFTR score
combine_score <- function(s1, s2){
score <- rep(0, n)
# CFTR 5: s1 = s2 = 4;
score[(s1==4) & (s2==4)] <- 5
# CFTR 4: {s1,s2} = {3,4};
score[(s1+s2)==7] <- 4
# CFTR 3: s1 = s2 = 3;
score[((s1==3) & (s2==3)] <- 3
# CFTR 2: The minimum score of the two alleles is 2
score[((s1==2) | (s2==2)) & ((s1+s2)>=4)] <- 2
# CFTR 2: The minimum score of the two alleles is 1
score[((s1==1) | (s2==1)) & ((s1+s2)>=2)] <- 1
}
combine_score(allele_score(allele1),
allele_score(allele2))
}
cftr <- function(allele1, allele2) {
n = length(allele1)
score <- rep(0, n)
# assign allele score
allele_score <- function(al){
ifelse(al %in% c(list4.1, list4.2), 4,
ifelse(al %in% c(list3.1, list3.2), 3,
ifelse(al %in% c(list2.1, list2.2), 2,
ifelse(al %in% c(list1.1, list1.2), 1, 0))))
}
# combining 2 allele scores into CFTR score
combine_score <- function(s1, s2){
score <- rep(0, n)
# CFTR 5: s1 = s2 = 4;
score[(s1==4) & (s2==4)] <- 5
# CFTR 4: {s1,s2} = {3,4};
score[(s1+s2)==7] <- 4
# CFTR 3: s1 = s2 = 3;
score[((s1==3) & (s2==3))] <- 3
# CFTR 2: The minimum score of the two alleles is 2
score[((s1==2) | (s2==2)) & ((s1+s2)>=4)] <- 2
# CFTR 2: The minimum score of the two alleles is 1
score[((s1==1) | (s2==1)) & ((s1+s2)>=2)] <- 1
}
combine_score(allele_score(allele1),
allele_score(allele2))
}
cftr <- function(allele1, allele2) {
n = length(allele1)
score <- rep(0, n)
# assign allele score
allele_score <- function(al){
ifelse(al %in% c(list4.1, list4.2), 4,
ifelse(al %in% c(list3.1, list3.2), 3,
ifelse(al %in% c(list2.1, list2.2), 2,
ifelse(al %in% c(list1.1, list1.2), 1, 0))))
}
# combining 2 allele scores into CFTR score
combine_score <- function(s1, s2){
score <- rep(0, n)
# CFTR 5: s1 = s2 = 4;
score[(s1==4) & (s2==4)] <- 5
# CFTR 4: {s1,s2} = {3,4};
score[(s1+s2)==7] <- 4
# CFTR 3: s1 = s2 = 3;
score[((s1==3) & (s2==3))] <- 3
# CFTR 2: The minimum score of the two alleles is 2
score[((s1==2) | (s2==2)) & ((s1+s2)>=4)] <- 2
# CFTR 2: The minimum score of the two alleles is 1
score[((s1==1) | (s2==1)) & ((s1+s2)>=2)] <- 1
return(score)
}
combine_score(allele_score(allele1),
allele_score(allele2))
}
cftr <- function(allele1, allele2) {
n = length(allele1)
score <- rep(0, n)
# assign allele score
allele_score <- function(al){
ifelse(al %in% c(list4.1, list4.2), 4,
ifelse(al %in% c(list3.1, list3.2), 3,
ifelse(al %in% c(list2.1, list2.2), 2,
ifelse(al %in% c(list1.1, list1.2), 1, 0))))
}
# combining 2 allele scores into CFTR score
combine_score <- function(s1, s2){
score <- rep(0, n)
# CFTR 5: s1 = s2 = 4;
score[(s1==4) & (s2==4)] <- 5
# CFTR 4: {s1,s2} = {3,4};
score[(s1+s2)==7] <- 4
# CFTR 3: s1 = s2 = 3;
score[((s1==3) & (s2==3))] <- 3
# CFTR 2: The minimum score of the two alleles is 2
score[((s1==2) | (s2==2)) & ((s1+s2)>=4)] <- 2
# CFTR 2: The minimum score of the two alleles is 1
score[((s1==1) | (s2==1)) & ((s1+s2)>=2)] <- 1
return(score)
}
return(combine_score(allele_score(allele1),
allele_score(allele2)))
}
allele_score <- function(al){
ifelse(al %in% c(list4.1, list4.2), 4,
ifelse(al %in% c(list3.1, list3.2), 3,
ifelse(al %in% c(list2.1, list2.2), 2,
ifelse(al %in% c(list1.1, list1.2), 1, 0))))
}
cftr <- function(allele1, allele2) {
n = length(allele1)
score <- rep(0, n)
# assign allele score
allele_score <- function(al){
ifelse(al %in% c(list4.1, list4.2), 4,
ifelse(al %in% c(list3.1, list3.2), 3,
ifelse(al %in% c(list2.1, list2.2), 2,
ifelse(al %in% c(list1.1, list1.2), 1, 0))))
}
# combining 2 allele scores into CFTR score
combine_score <- function(s1, s2){
score <- rep(0, n)
# CFTR 5: s1 = s2 = 4;
score[(s1==4) & (s2==4)] <- 5
# CFTR 4: {s1,s2} = {3,4};
score[(s1+s2)==7] <- 4
# CFTR 3: s1 = s2 = 3;
score[((s1==3) & (s2==3))] <- 3
# CFTR 2: The minimum score of the two alleles is 2
score[((s1==2) | (s2==2)) & ((s1+s2)>=4)] <- 2
# CFTR 2: The minimum score of the two alleles is 1
score[((s1==1) | (s2==1)) & ((s1+s2)>=2)] <- 1
return(score)
}
return(combine_score(allele_score(allele1),
allele_score(allele2)))
}
bigsnpr::sub_bed("../backingfiles/canadian_pa.bed")
#' Subseting individuals in phenotype and genotype data ####
#'
#' Subset the genetics and phenotype data by their "sample.ID", remove all missed phenotype values.
#'
#' @param input_rds Path to .rds of FBM genetic data
#' @param out_put_bed Path of output aligned genetic data
#' @param pheno Phenotype data, contain "sample.ID" column
#'
#' @return .plink output
qc_subset <- function(input_rds, output_bed, pheno) {
psa <- snp_attach(input_rds)
phenotype <- left_join(psa$fam, pheno, by="sample.ID")
message("Subseting bigSNP for pa...", Sys.time())
subset(psa, backingfile = bigsnpr::sub_bed(output_bed),
ind.row = rows_along(psa$fam)[!is.na(phenotype$pa_age)])
message("Writting .bed for pa...", Sys.time())
x <- snp_attach(bigsnpr::sub_bed(output_bed, "rds"))
snp_writeBed(x, bedfile = output_bed)
message("Done!", Sys.time())
}
library(boxi)
readRDS("../../script/phenotype/clean/phenotype_eda.Rds")
boxi_manhattan <- function(dt, p = "P", thr = 0.001,maf = 0, check = 1,freq = "MAF",
title = "", chr = "CHR", bp = "BP", snp = "SNP"){
p_val <- dplyr::pull(dt, p)
p_val<- p_val[!is.na(p_val)]
frq <- dplyr::pull(dt, freq)
dt_plot <- dt %>% dplyr::filter(p_val < thr) %>% dplyr::filter(freq>maf)
man<- function(){qqman::manhattan(dt_plot, chr = chr, bp = bp, p = p, snp = snp,ylim = c(1,10),
col = c("blue4", "orange3"),suggestiveline = FALSE,
main = title)}
if (check) {
pp <- p_val[frq>maf]
histo<- function() {hist(pp, freq = 0, main = "",xlab = "p values")}
p_pp = boxi::qqunif.plot(pp)
bottom_row <- plot_grid(histo, p_pp, labels = c('Histogram of p-values', 'PP-plot'), label_size = 12,ncol = 1)
plot_grid(man, bottom_row,
label_size = 12, ncol = 2,rel_widths = c(3, 1))
} else {man()}
}
setwd("/Volumes/struglis/boxi/psa/pkg/boxi")
setwd("/Volumes/struglis/boxi/psa/finalanalysis/analysis/result/")
